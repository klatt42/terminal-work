#!/bin/bash

# AI Session Handoff: Claude Code → Claude.AI
# Generates formatted summary of work completed for feeding back to Claude.AI

# Usage:
#   handoff-from-cc                    # Generate summary and copy to clipboard
#   handoff-from-cc --no-copy          # Generate summary without clipboard

PROJECT_DIR=$(pwd)
PROJECT_NAME=$(basename "$PROJECT_DIR")
SESSION_FILE="$PROJECT_DIR/.claude-session"
OUTPUT_FILE="$PROJECT_DIR/.handoff-summary.md"

echo "════════════════════════════════════════════════════════════════"
echo "  AI HANDOFF: Claude Code → Claude.AI"
echo "════════════════════════════════════════════════════════════════"
echo ""

# Check if session file exists
if [ ! -f "$SESSION_FILE" ]; then
    echo "⚠️  No .claude-session file found"
    echo ""
    echo "This project wasn't initialized with handoff-to-cc."
    echo "Generating summary anyway..."
    echo ""
    PRD_GOAL="General development work"
    PRD_FILE="none"
    CLAUDE_URL="none"
else
    # Read session context
    PRD_GOAL=$(grep "^goal:" "$SESSION_FILE" | sed 's/goal: //')
    PRD_FILE=$(grep "^prd_file:" "$SESSION_FILE" | sed 's/prd_file: //')
    CLAUDE_URL=$(grep "^claude_url:" "$SESSION_FILE" | sed 's/claude_url: //')
    SESSION_START=$(grep "^session_start:" "$SESSION_FILE" | sed 's/session_start: //')

    echo "📋 Original Goal: $PRD_GOAL"
    echo "📄 PRD Reference: $PRD_FILE"
    echo ""
fi

# Collect git information
if [ -d "$PROJECT_DIR/.git" ]; then
    CURRENT_BRANCH=$(git branch --show-current)
    LAST_COMMIT=$(git log -1 --pretty=%B 2>/dev/null | head -1 || echo "No recent commits")

    # Get commit history since session start (if available)
    if [ -n "$SESSION_START" ]; then
        COMMITS_SINCE=$(git log --since="$SESSION_START" --oneline 2>/dev/null | wc -l)
        COMMIT_LIST=$(git log --since="$SESSION_START" --pretty=format:"- %s" 2>/dev/null)
    else
        COMMITS_SINCE=$(git log --since="1 day ago" --oneline 2>/dev/null | wc -l)
        COMMIT_LIST=$(git log --since="1 day ago" --pretty=format:"- %s" 2>/dev/null)
    fi

    # Get file changes
    FILES_CHANGED=$(git diff --name-only HEAD~${COMMITS_SINCE}..HEAD 2>/dev/null | wc -l)
    if [ $COMMITS_SINCE -eq 0 ]; then
        FILES_CHANGED=$(git status --porcelain | wc -l)
    fi

    # Get uncommitted changes
    UNCOMMITTED=$(git status --porcelain | wc -l)
    MODIFIED_FILES=$(git status --porcelain | awk '{print "- " $2}')

else
    CURRENT_BRANCH="none"
    LAST_COMMIT="Not a git repository"
    COMMITS_SINCE=0
    COMMIT_LIST=""
    FILES_CHANGED=0
    UNCOMMITTED=0
    MODIFIED_FILES=""
fi

# Check for recent snapshots
LATEST_SNAPSHOT=""
if [ -d "$PROJECT_DIR/.snapshots" ] && [ -f "$PROJECT_DIR/.snapshots/latest-summary.txt" ]; then
    LATEST_SNAPSHOT=$(head -20 "$PROJECT_DIR/.snapshots/latest-summary.txt")
fi

# Generate handoff summary in markdown
cat > "$OUTPUT_FILE" <<EOF
# Implementation Summary: $PROJECT_NAME

**Generated:** $(date '+%Y-%m-%d %H:%M:%S')
**Original Goal:** $PRD_GOAL
**PRD Reference:** $PRD_FILE

---

## What Was Built

### Overview
Working on: **$PRD_GOAL**

### Git Activity
- **Branch:** $CURRENT_BRANCH
- **Commits Made:** $COMMITS_SINCE
- **Files Changed:** $FILES_CHANGED
- **Uncommitted Changes:** $UNCOMMITTED files

EOF

# Add commit history if available
if [ -n "$COMMIT_LIST" ] && [ $COMMITS_SINCE -gt 0 ]; then
    cat >> "$OUTPUT_FILE" <<EOF
### Commits During This Session
$COMMIT_LIST

EOF
fi

# Add modified files if there are uncommitted changes
if [ $UNCOMMITTED -gt 0 ]; then
    cat >> "$OUTPUT_FILE" <<EOF
### Uncommitted Changes
$MODIFIED_FILES

EOF
fi

# Add snapshot summary if available
if [ -n "$LATEST_SNAPSHOT" ]; then
    cat >> "$OUTPUT_FILE" <<EOF
### Latest Project State
\`\`\`
$LATEST_SNAPSHOT
\`\`\`

EOF
fi

# Add tasks status if available
if [ -f "$PROJECT_DIR/NEXT_SESSION_TASKS.md" ]; then
    cat >> "$OUTPUT_FILE" <<EOF
### Next Steps
$(head -30 "$PROJECT_DIR/NEXT_SESSION_TASKS.md")

EOF
elif [ -f "$PROJECT_DIR/TODO.md" ]; then
    cat >> "$OUTPUT_FILE" <<EOF
### Next Steps
$(head -30 "$PROJECT_DIR/TODO.md")

EOF
fi

# Add footer with instructions
cat >> "$OUTPUT_FILE" <<EOF
---

## How to Use This Summary

**Option 1: Continue in Claude.AI**
Copy this summary and paste it back into your original Claude.AI conversation to discuss next steps, refinements, or iterations.

**Option 2: Resume in Claude Code**
To resume work later:
\`\`\`bash
cd $PROJECT_DIR
snapshot-resume
\`\`\`

**Option 3: Create New Snapshot**
Before switching contexts:
\`\`\`bash
snapshot-create "Completed [feature name]"
\`\`\`

---

*Generated by Claude Code Handoff System*
EOF

echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "SUMMARY GENERATED"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo "✓ Summary saved to: .handoff-summary.md"
echo ""
echo "📊 Session Stats:"
echo "  • Commits: $COMMITS_SINCE"
echo "  • Files Changed: $FILES_CHANGED"
echo "  • Uncommitted: $UNCOMMITTED files"
echo ""

# Copy to clipboard if requested (default behavior)
if [ "$1" != "--no-copy" ]; then
    if command -v xclip >/dev/null 2>&1; then
        cat "$OUTPUT_FILE" | xclip -selection clipboard
        echo "✓ Summary copied to clipboard!"
    elif command -v clip.exe >/dev/null 2>&1; then
        # WSL with Windows clipboard
        cat "$OUTPUT_FILE" | clip.exe
        echo "✓ Summary copied to clipboard!"
    elif command -v pbcopy >/dev/null 2>&1; then
        # macOS
        cat "$OUTPUT_FILE" | pbcopy
        echo "✓ Summary copied to clipboard!"
    else
        echo "⚠️  Clipboard utility not found (install xclip)"
        echo "   Use: cat .handoff-summary.md | xclip -selection clipboard"
    fi
fi

echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "NEXT STEPS"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""

if [ "$CLAUDE_URL" != "none" ]; then
    echo "🔗 Original Claude.AI conversation:"
    echo "   $CLAUDE_URL"
    echo ""
fi

echo "1. Paste summary into Claude.AI to discuss:"
echo "   • Review what was built"
echo "   • Plan next iteration"
echo "   • Discuss refinements"
echo ""
echo "2. Or continue in Claude Code with:"
echo "   • snapshot-create \"Next milestone\""
echo "   • snapshot-resume (to review state)"
echo ""
echo "════════════════════════════════════════════════════════════════"

# Show preview of summary
echo ""
echo "📄 SUMMARY PREVIEW:"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
head -40 "$OUTPUT_FILE" | sed 's/^/  /'
echo "  ..."
echo "  (Full summary in .handoff-summary.md)"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
